#line 2 "/home/martin/Downloads/HubDB/DBLib/DBLexer.cpp"

#line 4 "/home/martin/Downloads/HubDB/DBLib/DBLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[563] =
    {   0,
        0,    0,    3,    3,    2,    2,   61,   59,   58,   56,
       57,   44,   50,   51,   49,   52,   59,   54,   46,   53,
       48,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
        3,    3,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,   58,   55,    0,   46,
       47,   47,   39,   47,   47,   47,   47,   18,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   43,   47,
       47,    6,   47,   47,   47,   47,   47,   47,   33,   47,
       47,   47,   47,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   45,
       10,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       13,   47,    9,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   47,   47,   47,   47,   47,
       47,   47,   16,   47,   31,   23,   47,   47,   47,   47,
       27,    7,    5,   47,   36,   47,   47,   20,   47,   14,
       47,   47,   47,   47,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,   47,   47,   47,   47,   47,   47,   47,   47,
       47,    8,   47,   47,   22,   47,   47,   47,   25,   47,
       47,   47,   32,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   47,   47,   15,   47,   30,
       47,   41,   35,   34,   26,   47,   11,   29,   47,   24,
       12,   28,   47,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   21,
       37,   47,   47,   40,   47,   42,    3,    3,    3,    3,
        3,    3,    3,    2,    2,    2,    2,    2,    2,    2,
       17,   47,   47,    3,    3,    3,    2,    2,    2,   47,
       47,    3,    3,    2,    2,   38,   19,    3,    3,    2,
        2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    5,    6,
        7,    8,    1,    9,   10,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,   13,    1,
       14,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   25,
        1,    1,    1,    1,    1,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   25,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[568] =
    {   0,
        0,    0,   63,    0,  126,    0,  437, 3535,  429, 3535,
     3535, 3535, 3535, 3535, 3535, 3535,  389, 3535,  179, 3535,
     3535,  164,    0,  167,  209,  156,  166,  182,  183,  178,
      178,  185,  182,  179,  177,  225,  231,  185,  199,  193,
        0,  396, 3535,    0,    0,    0,    0,    0,    0,  358,
        0,  192,    0,    0,  294,  351,  365,  407,  226,  222,
      287,  291,  438,  283,  354,  356,  292,  361,  478,  522,
      406,  446,  479,    0,  332,    0,    0, 3535,    0,    0,
        0,    0,  322,    0,  262,    0,    0,  585,  642,  656,
      698,  363,  450,  514,  571,  729,  489,  515,  524,  575,

      576,  769,  813,  645,  646,  678,  309, 3535,  285,  269,
        0,  225,    0,  246,  235,  247,  256,    0,  299,  293,
      295,  352,  370,  371,  399,  395,  418,  415,  702,  315,
      416,    0,  423,  461,  470,  424,  483,  508,    0,  525,
      534,  580,  540,    0,  287,    0,  273,  281,  655,  697,
      737,  768,  788,  804,  817,  746,  805,  839,  848,  852,
      856,  861,  865,  890,  894,  899,  938,  909,  947,  910,
      960,  961,  993,  973,  992, 1012, 1001, 1005, 1037, 1038,
     1052,    0,  275,    0,  244,  317, 1047, 1080, 1051, 1084,
     1089, 1100, 1117, 1126, 1128, 1133, 1142, 1159, 1167, 1174,

     1176, 1184, 1193, 1209, 1248, 1222, 1257, 1247, 1270, 1293,
     1295, 1283, 1329, 1321, 1328, 1338, 1357, 1361, 1377,  235,
        0,  576,  582,  599,  601,  603,  637,  652,  662,  665,
        0,  692,    0,  711,  715,  718,  730, 1119,  724,  733,
      777,  792,  745,  765,  798,  809,  914,  848,  878, 1030,
      895,  233, 1369, 1402, 1410, 1397, 1417, 1442, 1452, 1456,
     1461, 1451, 1484, 1492, 1494, 1499, 1501, 1537, 1539, 1541,
     1546, 1550, 1581, 1585, 1586, 1621, 1620, 1595, 1637, 1629,
     1654, 1674, 1669,  197, 1670, 1679, 1689, 1718, 1722, 1737,
     1717, 1760, 1753, 1762, 1770, 1795, 1779, 1804, 1799, 1818,

     1837, 1851, 1847, 1860, 1856, 1885, 1896, 1901, 1897, 1910,
     1939, 1938, 1946, 1980, 1948,  897, 1031,  911, 1070,  927,
      945,  951,    0,  950,    0,    0,  980, 1142, 1155, 1068,
        0,    0,    0, 1173,    0, 1201, 1078, 1099, 1150,    0,
     1198, 1217, 1222, 1241, 1981, 1997, 2014, 2028, 2029, 1989,
     2030, 2039, 2062, 2064, 2071, 2072, 2073, 2081, 2112, 2110,
     2114, 2119, 2121, 2152, 2156, 2169, 2167, 2184, 2168, 2200,
     2217, 2216, 2236, 2225, 2258, 2259, 2278, 2271, 2294, 2304,
     2306, 2311, 2313, 2320, 2339, 2346, 2348, 2361, 2359, 2368,
     2384, 2393, 2394, 2403, 2416, 2438, 2449, 2445, 2447, 2485,

     2486, 2490, 1248, 1314, 1315, 1323, 1321, 1219, 1353, 1230,
     1250,    0, 1253, 1356,    0, 1384, 1294, 1383, 1387, 1432,
     1408, 1439,    0, 2518, 2528, 2529, 2537, 2557, 2566, 2577,
     2591, 2600, 2610, 2611, 2633, 2622, 2642, 2647, 2658, 2680,
     2675, 2691, 2703, 2713, 2732, 2745, 2746, 2765, 2760, 2780,
     2805, 2785, 2794, 2813, 2822, 2838, 2833, 2845, 2847, 2878,
     2880, 2895, 2890, 2923, 2900, 1442, 1488,    0, 1502,    0,
     1510,    0,    0,    0,    0, 1532,    0,    0, 1543,    0,
        0,    0, 1548, 2928, 2933, 2940, 2942, 2968, 2975, 2976,
     2980, 2984, 2985, 3013, 3017, 3018, 3022, 3026, 3033, 3055,

     3059, 3064, 3066, 3075, 3097, 3106, 3108, 3113, 3117, 3139,
     3146, 3148, 3150, 3155, 3159, 3181, 3190, 3192, 3194,    0,
        0, 1445, 1517,    0, 1609,    0, 3201, 3203, 3236, 3241,
     3237, 3252, 3245, 3277, 3278, 3292, 3293, 3288, 3303, 3326,
        0, 1650, 1655, 3328, 3345, 3368, 3340, 3385, 3387, 1586,
     1631, 3394, 3413, 3422, 3429,    0,    0, 3380, 3439, 3455,
     3462, 3535,  196, 3518, 3522, 3526, 3530
    } ;

static yyconst flex_int16_t yy_def[568] =
    {   0,
      562,    1,  562,    3,  562,    5,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      564,  564,  562,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  565,  565,  565,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  566,  566,  566,  566,  562,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  567,  567,  567,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,  562,  562,  562,  562,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  564,  564,  564,  564,  564,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  566,  566,  566,  566,  566,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,  562,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  564,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  566,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,  563,
      563,  563,  563,  563,  563,  563,   57,   57,   57,   57,
       57,   57,   57,   90,   90,   90,   90,   90,   90,   90,
      563,  563,  563,   57,   57,   57,   90,   90,   90,  563,
      563,   57,   57,   90,   90,  563,  563,   57,   57,   90,
       90,    0,  562,  562,  562,  562,  562
    } ;

static yyconst flex_uint16_t yy_nxt[3599] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   23,   32,   23,   23,   33,   34,
       35,   23,   36,   37,   38,   39,   40,   23,   23,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       23,   23,   33,   34,   35,   23,   36,   37,   38,   39,
       40,   23,   23,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   56,   65,   56,
       56,   66,   67,   68,   56,   69,   70,   71,   72,   73,

       56,   56,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   56,   56,   66,   67,   68,   56,   69,
       70,   71,   72,   73,   56,   56,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
       89,   98,   89,   89,   99,  100,  101,   89,  102,  103,
      104,  105,  106,   89,   89,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   98,   89,   89,   99,  100,
      101,   89,  102,  103,  104,  105,  106,   89,   89,  109,
      110,  112,  114,  123,  124,  115,  113,  125,  116,  111,

      126,  127,  147,  148,  128,  129,  130,  131,  284,  132,
      133,  134,  141,  142,  143,  112,  114,  123,  124,  115,
      113,  125,  116,  117,  118,  126,  127,  119,  128,  129,
      130,  120,  131,  132,  133,  134,  141,  121,  142,  143,
      122,  135,  221,  136,  252,  138,  220,  149,  117,  118,
      162,  149,  119,  163,  149,  284,  120,  149,  137,  139,
      222,  121,  223,  161,  122,  224,  135,  221,  136,  140,
      138,  149,  185,  186,  162,  149,  183,  163,  149,  109,
      110,  149,  137,  139,  252,  222,  223,  161,  145,  225,
      224,  147,  148,  140,  144,  144,  220,  144,  144,  144,

      144,  144,  144,  144,  144,  164,  144,  144,  149,  165,
      107,  168,  149,  225,  149,  149,  149,  149,  149,  149,
      149,  150,  149,  171,  226,  227,  151,  185,  186,  228,
      164,  184,  149,  183,  165,  168,  149,  239,  149,  149,
      149,  149,  149,  149,  149,  150,  149,  171,  226,  227,
      151,  144,  144,  228,  144,  144,  144,  144,  144,  144,
      144,  144,  239,  144,  144,  144,  144,  146,  144,  144,
      144,  144,  144,  144,  144,  144,  169,  144,  144,  149,
      229,  149,  149,  170,  149,  149,  149,  149,  187,  149,
      152,  187,  149,  153,  187,  172,  154,  145,  108,  230,

      199,  169,  231,  149,  229,  149,  149,  170,  149,  149,
      149,  149,  187,  149,  152,  187,  149,  153,  187,  172,
      154,  155,  156,  230,  199,  157,  231,  232,  233,  158,
      107,  149,  149,  179,  149,  159,  562,  149,  160,  562,
      562,  562,  562,  234,  235,  241,  155,  156,  240,  244,
      157,  232,  233,  562,  158,  149,  149,  179,  149,  159,
      180,  149,  160,  149,  166,  167,  149,  234,  235,  149,
      241,  149,  240,  244,  149,  187,  562,  149,  200,  562,
      562,  201,  562,  242,  562,  180,  562,  149,  166,  167,
      149,  243,  562,  149,  173,  149,  174,  245,  149,  187,

      181,  149,  200,  149,  149,  201,  149,  149,  242,  149,
      149,  175,  562,  562,  187,  562,  243,  206,  562,  173,
      187,  174,  245,  246,  562,  181,  562,  149,  149,  562,
      149,  149,  202,  149,  149,  175,  176,  207,  187,  187,
      187,  206,  187,  187,  187,  187,  187,  149,  246,  187,
      177,  208,  187,  149,  247,  187,  248,  202,  251,  562,
      178,  176,  207,  187,  187,  562,  187,  187,  562,  187,
      187,  149,  562,  187,  177,  208,  187,  149,  247,  187,
      562,  248,  562,  251,  178,  182,  182,  182,  182,  203,
      182,  182,  182,  182,  182,  182,  187,  182,  182,  187,

      187,  187,  187,  187,  187,  249,  209,  187,  316,  317,
      210,  250,  188,  318,  203,  319,  562,  189,  562,  562,
      187,  320,  562,  187,  187,  187,  187,  187,  187,  249,
      209,  187,  316,  317,  210,  250,  188,  562,  318,  562,
      319,  189,  182,  182,  182,  182,  320,  182,  182,  182,
      182,  182,  182,  321,  182,  182,  182,  182,  182,  182,
      218,  182,  182,  182,  182,  182,  182,  322,  182,  182,
      187,  187,  217,  187,  187,  562,  187,  187,  321,  562,
      149,  190,  562,  149,  191,  218,  149,  192,  562,  562,
      562,  323,  322,  324,  187,  187,  217,  187,  187,  219,

      187,  187,  562,  187,  149,  190,  187,  149,  191,  187,
      149,  192,  193,  194,  253,  323,  195,  324,  325,  236,
      196,  562,  149,  187,  219,  149,  197,  187,  149,  198,
      187,  562,  562,  187,  237,  238,  328,  193,  194,  253,
      326,  195,  325,  327,  236,  196,  149,  187,  329,  149,
      197,  332,  149,  198,  187,  204,  205,  187,  237,  238,
      187,  328,  149,  336,  326,  149,  333,  327,  149,  562,
      562,  149,  562,  329,  149,  332,  562,  149,  187,  204,
      205,  187,  254,  337,  187,  211,  149,  212,  336,  149,
      333,  562,  149,  149,  187,  149,  149,  187,  149,  149,

      187,  149,  213,  562,  334,  562,  562,  254,  337,  562,
      211,  562,  212,  149,  562,  255,  149,  149,  187,  149,
      149,  187,  256,  149,  187,  335,  213,  214,  334,  149,
      258,  338,  149,  149,  339,  149,  149,  149,  187,  255,
      149,  215,  149,  149,  187,  149,  562,  256,  149,  335,
      257,  216,  214,  149,  258,  338,  149,  149,  339,  149,
      149,  562,  187,  562,  149,  215,  149,  149,  187,  149,
      149,  259,  149,  149,  257,  216,  149,  149,  341,  149,
      261,  149,  260,  149,  149,  262,  149,  149,  149,  149,
      149,  149,  263,  264,  149,  259,  149,  149,  562,  562,

      149,  149,  341,  149,  261,  149,  260,  149,  149,  262,
      149,  149,  342,  149,  149,  149,  263,  264,  149,  266,
      149,  149,  149,  265,  149,  149,  344,  149,  267,  403,
      149,  271,  340,  562,  149,  149,  342,  149,  149,  149,
      149,  149,  149,  266,  405,  149,  149,  265,  149,  149,
      344,  149,  267,  403,  149,  268,  271,  340,  149,  149,
      407,  149,  149,  149,  149,  149,  149,  562,  405,  149,
      269,  270,  149,  408,  562,  149,  409,  562,  149,  272,
      268,  410,  273,  274,  407,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  269,  270,  149,  408,  276,  149,

      409,  149,  149,  272,  149,  410,  277,  273,  274,  149,
      149,  411,  149,  149,  275,  149,  149,  149,  149,  562,
      149,  149,  276,  149,  149,  149,  149,  278,  149,  149,
      149,  277,  149,  149,  279,  411,  149,  149,  562,  275,
      149,  149,  149,  149,  149,  149,  343,  149,  149,  404,
      149,  562,  278,  149,  149,  562,  149,  149,  279,  280,
      149,  149,  149,  281,  149,  149,  149,  149,  149,  282,
      283,  343,  187,  562,  404,  187,  187,  149,  187,  187,
      149,  562,  187,  149,  280,  406,  149,  281,  414,  149,
      149,  562,  149,  282,  417,  283,  187,  285,  286,  187,

      187,  149,  187,  187,  149,  187,  187,  149,  187,  187,
      406,  187,  187,  414,  187,  187,  287,  187,  288,  417,
      187,  418,  285,  286,  562,  187,  562,  562,  187,  187,
      562,  187,  187,  187,  562,  187,  187,  330,  187,  187,
      287,  187,  187,  288,  187,  187,  418,  331,  187,  187,
      289,  187,  187,  290,  187,  187,  187,  187,  187,  187,
      562,  187,  330,  562,  187,  291,  187,  187,  419,  187,
      187,  331,  187,  187,  289,  187,  292,  290,  187,  412,
      187,  187,  187,  187,  187,  187,  413,  293,  187,  291,
      187,  187,  187,  419,  187,  187,  294,  187,  187,  187,

      292,  187,  187,  412,  296,  295,  415,  187,  187,  187,
      413,  293,  187,  562,  187,  187,  187,  297,  298,  187,
      294,  187,  187,  187,  187,  187,  187,  416,  296,  295,
      415,  187,  420,  187,  187,  421,  187,  187,  299,  187,
      187,  297,  298,  422,  303,  187,  471,  187,  187,  562,
      187,  416,  562,  187,  562,  562,  420,  562,  187,  423,
      421,  187,  299,  473,  187,  300,  466,  562,  422,  303,
      471,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      301,  302,  187,  474,  423,  187,  475,  473,  187,  304,
      300,  466,  305,  562,  562,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  301,  302,  187,  474,  308,  187,
      475,  187,  187,  304,  187,  306,  307,  305,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  478,  562,  562,
      467,  562,  308,  468,  562,  187,  310,  469,  187,  470,
      306,  307,  187,  309,  187,  187,  187,  187,  187,  187,
      187,  478,  187,  187,  187,  467,  187,  187,  468,  187,
      187,  310,  469,  187,  470,  562,  187,  311,  309,  187,
      187,  472,  562,  187,  476,  562,  187,  187,  187,  312,
      187,  187,  187,  187,  187,  187,  313,  187,  187,  187,
      187,  311,  314,  187,  149,  315,  472,  149,  477,  476,

      149,  562,  187,  562,  312,  187,  187,  562,  187,  187,
      313,  347,  187,  187,  562,  479,  314,  562,  149,  480,
      315,  149,  149,  477,  149,  149,  187,  149,  149,  187,
      149,  348,  187,  149,  345,  149,  347,  346,  149,  479,
      482,  149,  149,  480,  562,  149,  149,  562,  149,  149,
      481,  149,  149,  483,  149,  562,  348,  149,  345,  149,
      349,  346,  149,  541,  482,  149,  149,  149,  350,  149,
      149,  351,  149,  149,  520,  481,  149,  149,  483,  353,
      149,  149,  149,  149,  149,  349,  149,  149,  541,  149,
      352,  149,  149,  350,  149,  562,  351,  149,  520,  562,

      149,  149,  562,  353,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  352,  149,  149,  149,  354,  149,
      149,  521,  149,  149,  149,  149,  149,  149,  355,  356,
      149,  562,  149,  149,  522,  542,  149,  523,  562,  149,
      562,  149,  354,  149,  149,  521,  149,  149,  149,  149,
      149,  149,  355,  356,  149,  357,  149,  358,  522,  359,
      542,  523,  149,  524,  149,  149,  149,  149,  149,  360,
      149,  149,  149,  361,  149,  149,  525,  149,  149,  526,
      357,  149,  358,  362,  359,  562,  149,  524,  149,  149,
      149,  149,  149,  360,  149,  149,  149,  361,  149,  149,

      525,  149,  149,  526,  365,  149,  149,  362,  363,  149,
      149,  149,  149,  149,  149,  562,  149,  149,  364,  556,
      368,  562,  562,  149,  562,  562,  149,  562,  562,  365,
      149,  543,  363,  149,  149,  149,  149,  149,  149,  366,
      149,  149,  364,  556,  368,  149,  149,  149,  149,  149,
      149,  149,  149,  367,  149,  369,  543,  149,  562,  370,
      149,  562,  149,  557,  366,  149,  550,  562,  149,  149,
      149,  551,  149,  149,  562,  149,  149,  367,  149,  149,
      369,  149,  149,  370,  149,  149,  149,  557,  371,  149,
      372,  550,  149,  562,  149,  187,  551,  149,  187,  149,

      373,  187,  149,  149,  187,  149,  149,  187,  562,  149,
      187,  374,  371,  562,  187,  372,  375,  187,  149,  187,
      187,  149,  187,  149,  373,  187,  149,  562,  187,  149,
      562,  187,  376,  379,  187,  374,  377,  562,  187,  562,
      375,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  562,  562,  187,  562,  378,  562,  376,  379,  562,
      562,  377,  187,  562,  562,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  380,  562,  187,  187,  562,
      378,  187,  381,  562,  187,  187,  187,  187,  187,  187,
      382,  187,  187,  187,  562,  187,  562,  562,  187,  562,

      380,  187,  187,  562,  187,  187,  381,  187,  187,  187,
      187,  187,  187,  562,  382,  187,  562,  187,  562,  187,
      187,  383,  187,  187,  187,  187,  187,  385,  187,  187,
      187,  187,  187,  384,  187,  187,  386,  562,  562,  562,
      562,  562,  562,  187,  187,  383,  187,  187,  187,  187,
      187,  385,  562,  187,  187,  387,  187,  384,  562,  187,
      562,  386,  187,  562,  562,  187,  562,  187,  187,  388,
      187,  562,  187,  187,  390,  187,  187,  562,  187,  389,
      387,  187,  187,  392,  187,  187,  187,  187,  187,  187,
      562,  187,  187,  391,  388,  562,  187,  562,  390,  187,

      187,  562,  187,  389,  562,  187,  187,  392,  187,  187,
      187,  187,  187,  187,  394,  187,  187,  391,  393,  395,
      562,  187,  187,  562,  187,  187,  187,  187,  187,  187,
      396,  562,  187,  562,  187,  397,  562,  187,  187,  394,
      187,  187,  393,  562,  395,  187,  187,  562,  187,  187,
      187,  187,  187,  187,  396,  562,  187,  398,  562,  397,
      562,  562,  187,  187,  187,  187,  187,  187,  399,  187,
      187,  187,  562,  187,  187,  562,  187,  187,  562,  402,
      400,  562,  398,  562,  562,  562,  562,  187,  187,  562,
      187,  187,  399,  187,  187,  187,  401,  187,  187,  562,

      187,  187,  562,  402,  400,  187,  149,  562,  187,  149,
      562,  187,  149,  424,  149,  425,  562,  429,  562,  562,
      149,  401,  149,  562,  562,  149,  562,  562,  149,  187,
      149,  562,  187,  149,  562,  187,  149,  424,  149,  149,
      425,  429,  149,  427,  149,  149,  149,  426,  562,  149,
      562,  562,  149,  149,  149,  430,  149,  149,  149,  149,
      149,  149,  428,  149,  149,  562,  149,  149,  427,  149,
      149,  426,  562,  562,  562,  562,  562,  149,  149,  430,
      149,  149,  149,  149,  149,  149,  428,  149,  149,  149,
      149,  149,  149,  431,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  432,  149,  562,  149,  562,  562,  149,
      433,  149,  434,  149,  149,  562,  149,  431,  562,  149,
      149,  149,  149,  149,  149,  149,  149,  432,  149,  562,
      149,  562,  435,  149,  433,  149,  434,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  562,  149,
      149,  562,  149,  562,  436,  562,  562,  435,  562,  149,
      562,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  562,  149,  149,  562,  149,  149,  436,  562,
      149,  149,  437,  149,  149,  438,  562,  149,  562,  439,
      562,  562,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  440,  562,  149,  149,  437,  149,  149,  149,
      438,  149,  149,  562,  439,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  562,  440,  149,  562,
      562,  149,  562,  149,  441,  442,  149,  443,  562,  149,
      562,  149,  149,  562,  149,  149,  562,  149,  149,  149,
      187,  562,  149,  187,  444,  149,  187,  445,  441,  562,
      442,  149,  443,  562,  149,  149,  149,  149,  149,  149,
      562,  149,  149,  562,  187,  562,  446,  187,  562,  444,
      187,  445,  562,  187,  187,  149,  187,  187,  149,  187,
      187,  149,  447,  448,  562,  562,  187,  562,  562,  187,

      562,  446,  187,  187,  449,  562,  187,  187,  187,  187,
      187,  187,  562,  187,  187,  562,  447,  562,  448,  187,
      187,  562,  450,  187,  562,  187,  187,  187,  449,  451,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      562,  187,  452,  187,  187,  187,  450,  562,  187,  187,
      562,  187,  562,  451,  562,  187,  187,  562,  187,  187,
      187,  187,  187,  187,  187,  187,  452,  187,  187,  187,
      453,  187,  187,  187,  187,  187,  187,  187,  562,  455,
      562,  456,  562,  454,  187,  562,  187,  187,  187,  187,
      187,  187,  187,  187,  453,  187,  187,  187,  187,  187,

      187,  187,  562,  455,  562,  562,  456,  454,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  457,  562,  187,  458,
      562,  187,  459,  187,  187,  562,  187,  562,  562,  187,
      562,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      457,  562,  187,  458,  562,  187,  562,  459,  187,  562,
      460,  562,  562,  187,  562,  187,  187,  461,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  562,
      187,  462,  562,  562,  562,  460,  562,  187,  562,  562,
      187,  562,  461,  187,  187,  562,  187,  187,  187,  187,

      187,  187,  187,  463,  187,  462,  562,  464,  465,  562,
      187,  187,  562,  187,  187,  187,  187,  187,  187,  562,
      562,  187,  562,  562,  562,  562,  562,  562,  463,  562,
      562,  562,  464,  465,  187,  187,  484,  187,  187,  187,
      187,  187,  187,  149,  485,  187,  149,  486,  562,  149,
      562,  487,  562,  149,  149,  562,  149,  149,  562,  149,
      149,  484,  149,  562,  562,  149,  562,  149,  149,  485,
      149,  562,  486,  149,  562,  488,  487,  149,  149,  562,
      149,  149,  149,  149,  149,  149,  149,  562,  149,  149,
      562,  149,  149,  489,  149,  490,  562,  149,  562,  562,

      488,  562,  149,  562,  562,  149,  149,  562,  149,  149,
      562,  562,  149,  562,  562,  149,  149,  489,  149,  149,
      490,  149,  149,  562,  491,  149,  149,  562,  149,  149,
      562,  149,  149,  492,  562,  149,  149,  562,  149,  149,
      149,  149,  149,  149,  493,  562,  149,  149,  491,  149,
      149,  494,  149,  149,  562,  149,  495,  492,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  493,  562,
      149,  149,  149,  149,  149,  149,  494,  149,  149,  562,
      496,  495,  149,  149,  562,  149,  149,  562,  149,  149,
      497,  149,  562,  499,  149,  562,  149,  149,  562,  149,

      149,  562,  149,  149,  496,  149,  149,  149,  149,  562,
      149,  149,  498,  149,  497,  562,  149,  501,  499,  149,
      562,  562,  149,  500,  149,  562,  562,  149,  149,  149,
      149,  149,  149,  562,  149,  149,  498,  562,  149,  562,
      149,  149,  501,  149,  149,  562,  149,  500,  562,  562,
      502,  562,  149,  562,  562,  149,  562,  187,  149,  562,
      187,  503,  149,  187,  504,  149,  562,  562,  149,  562,
      187,  187,  562,  187,  187,  502,  187,  187,  506,  505,
      562,  187,  562,  562,  187,  187,  503,  187,  187,  504,
      187,  187,  562,  187,  187,  187,  187,  187,  187,  562,

      187,  187,  562,  506,  505,  187,  562,  507,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  509,  187,
      187,  562,  187,  508,  562,  187,  562,  510,  562,  187,
      187,  507,  187,  187,  187,  187,  187,  187,  187,  562,
      187,  187,  509,  187,  187,  562,  187,  187,  508,  187,
      187,  510,  562,  187,  187,  511,  512,  187,  187,  513,
      187,  187,  187,  187,  187,  187,  187,  562,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  511,
      514,  512,  187,  562,  513,  187,  562,  187,  187,  562,
      187,  562,  562,  187,  187,  562,  187,  187,  562,  187,

      187,  562,  187,  187,  514,  187,  187,  562,  187,  187,
      515,  187,  516,  517,  562,  187,  562,  562,  187,  562,
      187,  187,  518,  187,  562,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  515,  187,  516,  519,  517,  187,
      562,  562,  187,  562,  187,  187,  518,  187,  187,  187,
      187,  187,  187,  149,  187,  187,  149,  562,  149,  149,
      527,  149,  519,  562,  149,  149,  528,  149,  149,  562,
      149,  149,  187,  149,  529,  187,  562,  149,  187,  562,
      149,  562,  149,  149,  527,  149,  562,  562,  149,  149,
      528,  149,  149,  149,  149,  149,  149,  149,  529,  149,

      149,  149,  530,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  562,  149,  149,  149,  562,  562,
      149,  562,  562,  149,  149,  149,  530,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  531,  149,  149,  149,  149,  149,
      149,  149,  562,  149,  149,  532,  562,  149,  149,  562,
      562,  149,  149,  562,  149,  149,  149,  149,  531,  149,
      149,  149,  149,  149,  149,  149,  562,  149,  149,  532,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  187,
      533,  187,  187,  562,  187,  187,  534,  187,  562,  535,

      187,  562,  562,  187,  149,  562,  187,  149,  149,  562,
      149,  149,  562,  187,  533,  187,  187,  562,  187,  187,
      534,  187,  187,  535,  187,  187,  562,  187,  187,  536,
      187,  187,  562,  187,  187,  537,  187,  187,  187,  187,
      562,  187,  187,  562,  187,  187,  187,  562,  187,  187,
      562,  562,  187,  536,  562,  187,  562,  187,  187,  537,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  538,
      187,  187,  562,  187,  187,  562,  187,  187,  187,  562,
      187,  187,  539,  562,  187,  187,  562,  187,  187,  187,

      187,  187,  187,  538,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  562,  187,  187,  539,  187,  187,  187,
      187,  187,  187,  187,  562,  540,  149,  562,  149,  149,
      187,  149,  149,  187,  149,  562,  187,  562,  562,  187,
      562,  187,  187,  187,  187,  187,  187,  187,  562,  540,
      149,  562,  149,  149,  544,  149,  149,  562,  149,  545,
      562,  149,  149,  562,  149,  149,  149,  149,  149,  149,
      149,  562,  149,  149,  546,  562,  149,  149,  562,  544,
      149,  562,  562,  149,  545,  149,  149,  562,  149,  149,
      149,  149,  149,  149,  149,  562,  149,  149,  562,  546,

      149,  149,  187,  187,  149,  187,  187,  149,  187,  187,
      547,  548,  562,  187,  562,  562,  187,  187,  187,  187,
      187,  187,  562,  187,  187,  549,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  547,  548,  187,  562,  562,
      187,  187,  187,  187,  187,  187,  562,  187,  187,  562,
      549,  187,  187,  149,  187,  187,  149,  187,  187,  149,
      562,  552,  562,  562,  562,  187,  562,  562,  187,  562,
      149,  187,  562,  149,  562,  187,  149,  149,  187,  562,
      149,  187,  562,  149,  553,  562,  552,  562,  562,  187,
      562,  562,  187,  149,  149,  187,  149,  149,  562,  149,

      149,  554,  562,  555,  562,  149,  562,  562,  149,  553,
      187,  149,  187,  187,  562,  187,  187,  149,  187,  149,
      149,  562,  149,  149,  562,  149,  554,  558,  555,  149,
      562,  562,  149,  562,  187,  149,  187,  187,  149,  187,
      187,  149,  187,  149,  149,  559,  149,  187,  562,  149,
      187,  558,  562,  187,  187,  560,  562,  187,  562,  562,
      187,  561,  149,  562,  149,  149,  562,  149,  149,  559,
      149,  187,  562,  562,  187,  562,  562,  187,  187,  560,
      187,  187,  562,  187,  187,  561,  187,  187,  149,  562,
      187,  149,  562,  187,  149,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  187,  562,  562,  187,  562,  562,
      187,  187,  562,  562,  187,  562,  562,  187,  144,  562,
      144,  144,  149,  562,  149,  149,  182,  182,  562,  182,
      187,  187,  562,  187,    7,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562

    } ;

static yyconst flex_int16_t yy_chk[3599] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,   19,
       19,   22,   24,   26,   27,   24,   22,   27,   24,  563,

       28,   29,   52,   52,   30,   30,   31,   32,  284,   33,
       34,   35,   38,   39,   40,   22,   24,   26,   27,   24,
       22,   27,   24,   25,   25,   28,   29,   25,   30,   30,
       31,   25,   32,   33,   34,   35,   38,   25,   39,   40,
       25,   36,  112,   36,  252,   37,  220,   60,   25,   25,
       60,   59,   25,   60,   59,  185,   25,   59,   36,   37,
      114,   25,  115,   59,   25,  116,   36,  112,   36,   37,
       37,   60,   85,   85,   60,   59,  183,   60,   59,  110,
      110,   59,   36,   37,  147,  114,  115,   59,  145,  117,
      116,  148,  148,   37,   55,   55,  109,   55,   55,   55,

       55,   55,   55,   55,   55,   61,   55,   55,   64,   62,
      107,   64,   61,  117,   64,   61,   62,   67,   61,   62,
       67,   55,   62,   67,  119,  120,   55,  186,  186,  121,
       61,   83,   64,   75,   62,   64,   61,  130,   64,   61,
       62,   67,   61,   62,   67,   55,   62,   67,  119,  120,
       55,   56,   56,  121,   56,   56,   56,   56,   56,   56,
       56,   56,  130,   56,   56,   57,   57,   50,   57,   57,
       57,   57,   57,   57,   57,   57,   65,   57,   57,   65,
      122,   66,   65,   66,   66,   65,   68,   66,   92,   68,
       57,   92,   68,   57,   92,   68,   57,   42,   17,  123,

       92,   65,  124,   65,  122,   66,   65,   66,   66,   65,
       68,   66,   92,   68,   57,   92,   68,   57,   92,   68,
       57,   58,   58,  123,   92,   58,  124,  125,  126,   58,
        9,   71,   58,   71,   71,   58,    7,   71,   58,    0,
        0,    0,    0,  127,  128,  133,   58,   58,  131,  136,
       58,  125,  126,    0,   58,   71,   58,   71,   71,   58,
       72,   71,   58,   63,   63,   63,   63,  127,  128,   63,
      133,   72,  131,  136,   72,   93,    0,   72,   93,    0,
        0,   93,    0,  134,    0,   72,    0,   63,   63,   63,
       63,  135,    0,   63,   69,   72,   69,  137,   72,   93,

       73,   72,   93,   69,   73,   93,   69,   73,  134,   69,
       73,   69,    0,    0,   97,    0,  135,   97,    0,   69,
       97,   69,  137,  138,    0,   73,    0,   69,   73,    0,
       69,   73,   94,   69,   73,   69,   70,   98,   97,   94,
       98,   97,   94,   98,   97,   94,   98,   70,  138,   99,
       70,   99,   99,   70,  140,   99,  141,   94,  143,    0,
       70,   70,   98,   94,   98,    0,   94,   98,    0,   94,
       98,   70,    0,   99,   70,   99,   99,   70,  140,   99,
        0,  141,    0,  143,   70,   88,   88,   88,   88,   95,
       88,   88,   88,   88,   88,   88,   95,   88,   88,   95,

      100,  101,   95,  100,  101,  142,  100,  101,  222,  223,
      101,  142,   88,  224,   95,  225,    0,   88,    0,    0,
       95,  226,    0,   95,  100,  101,   95,  100,  101,  142,
      100,  101,  222,  223,  101,  142,   88,    0,  224,    0,
      225,   88,   89,   89,   89,   89,  226,   89,   89,   89,
       89,   89,   89,  227,   89,   89,   90,   90,   90,   90,
      105,   90,   90,   90,   90,   90,   90,  228,   90,   90,
      104,  105,  104,  104,  105,    0,  104,  105,  227,    0,
      149,   90,    0,  149,   90,  105,  149,   90,    0,    0,
        0,  229,  228,  230,  104,  105,  104,  104,  105,  106,

      104,  105,    0,  106,  149,   90,  106,  149,   90,  106,
      149,   90,   91,   91,  150,  229,   91,  230,  232,  129,
       91,    0,  150,   91,  106,  150,   91,  106,  150,   91,
      106,    0,    0,  106,  129,  129,  236,   91,   91,  150,
      234,   91,  232,  235,  129,   91,  150,   91,  237,  150,
       91,  239,  150,   91,   96,   96,   96,   96,  129,  129,
       96,  236,  151,  243,  234,  151,  240,  235,  151,    0,
        0,  156,    0,  237,  156,  239,    0,  156,   96,   96,
       96,   96,  152,  244,   96,  102,  151,  102,  243,  151,
      240,    0,  151,  152,  102,  156,  152,  102,  156,  152,

      102,  156,  102,    0,  241,    0,    0,  152,  244,    0,
      102,    0,  102,  153,    0,  153,  153,  152,  102,  153,
      152,  102,  154,  152,  102,  242,  102,  103,  241,  154,
      157,  245,  154,  157,  246,  154,  157,  153,  103,  153,
      153,  103,  155,  153,  103,  155,    0,  154,  155,  242,
      155,  103,  103,  154,  157,  245,  154,  157,  246,  154,
      157,    0,  103,    0,  158,  103,  155,  158,  103,  155,
      158,  158,  155,  159,  155,  103,  159,  160,  248,  159,
      160,  161,  159,  160,  161,  161,  162,  161,  158,  162,
      163,  158,  162,  163,  158,  158,  163,  159,    0,    0,

      159,  160,  248,  159,  160,  161,  159,  160,  161,  161,
      162,  161,  249,  162,  163,  164,  162,  163,  164,  165,
      163,  164,  165,  164,  166,  165,  251,  166,  166,  316,
      166,  168,  247,    0,  168,  170,  249,  168,  170,  164,
      168,  170,  164,  165,  318,  164,  165,  164,  166,  165,
      251,  166,  166,  316,  166,  167,  168,  247,  168,  170,
      320,  168,  170,  167,  168,  170,  167,    0,  318,  167,
      167,  167,  169,  321,    0,  169,  322,    0,  169,  169,
      167,  324,  171,  172,  320,  171,  172,  167,  171,  172,
      167,  171,  172,  167,  167,  167,  169,  321,  174,  169,

      322,  174,  169,  169,  174,  324,  175,  171,  172,  171,
      172,  327,  171,  172,  173,  171,  172,  175,  173,    0,
      175,  173,  174,  175,  173,  174,  177,  176,  174,  177,
      178,  175,  177,  178,  178,  327,  178,  176,    0,  173,
      176,  175,  173,  176,  175,  173,  250,  175,  173,  317,
      177,    0,  176,  177,  178,    0,  177,  178,  178,  179,
      178,  176,  179,  180,  176,  179,  180,  176,  179,  180,
      181,  250,  187,    0,  317,  187,  189,  181,  187,  189,
      181,    0,  189,  181,  179,  319,  179,  180,  330,  179,
      180,    0,  179,  180,  337,  181,  187,  188,  190,  187,

      189,  181,  187,  189,  181,  188,  189,  181,  188,  190,
      319,  188,  190,  330,  191,  190,  191,  191,  192,  337,
      191,  338,  188,  190,    0,  192,    0,    0,  192,  188,
        0,  192,  188,  190,    0,  188,  190,  238,  191,  190,
      191,  191,  193,  192,  191,  193,  338,  238,  193,  192,
      193,  194,  192,  195,  194,  192,  195,  194,  196,  195,
        0,  196,  238,    0,  196,  196,  193,  197,  339,  193,
      197,  238,  193,  197,  193,  194,  197,  195,  194,  328,
      195,  194,  196,  195,  198,  196,  329,  198,  196,  196,
      198,  197,  199,  339,  197,  199,  199,  197,  199,  200,

      197,  201,  200,  328,  201,  200,  334,  201,  198,  202,
      329,  198,  202,    0,  198,  202,  199,  202,  203,  199,
      199,  203,  199,  200,  203,  201,  200,  336,  201,  200,
      334,  201,  341,  202,  204,  342,  202,  204,  204,  202,
      204,  202,  203,  343,  206,  203,  408,  206,  203,    0,
      206,  336,    0,  206,    0,    0,  341,    0,  204,  344,
      342,  204,  204,  410,  204,  205,  403,    0,  343,  206,
      408,  206,  208,  205,  206,  208,  205,  206,  208,  205,
      205,  205,  207,  411,  344,  207,  413,  410,  207,  207,
      205,  403,  209,    0,    0,  209,  208,  205,  209,  208,

      205,  209,  208,  205,  205,  205,  207,  411,  212,  207,
      413,  212,  207,  207,  212,  210,  211,  209,  210,  209,
      211,  210,  209,  211,  210,  209,  211,  417,    0,    0,
      404,    0,  212,  405,    0,  212,  214,  406,  212,  407,
      210,  211,  210,  213,  211,  210,  214,  211,  210,  214,
      211,  417,  214,  215,  213,  404,  215,  213,  405,  215,
      213,  214,  406,  216,  407,    0,  216,  216,  213,  216,
      214,  409,    0,  214,  414,    0,  214,  215,  213,  217,
      215,  213,  217,  215,  213,  217,  218,  216,  217,  218,
      216,  216,  218,  216,  253,  219,  409,  253,  416,  414,

      253,    0,  219,    0,  217,  219,  217,    0,  219,  217,
      218,  256,  217,  218,    0,  418,  218,    0,  253,  419,
      219,  253,  256,  416,  253,  256,  219,  254,  256,  219,
      254,  257,  219,  254,  254,  255,  256,  255,  255,  418,
      421,  255,  257,  419,    0,  257,  256,    0,  257,  256,
      420,  254,  256,  422,  254,    0,  257,  254,  254,  255,
      258,  255,  255,  522,  421,  255,  257,  258,  259,  257,
      258,  260,  257,  258,  466,  420,  262,  259,  422,  262,
      259,  260,  262,  259,  260,  258,  261,  260,  522,  261,
      261,  258,  261,  259,  258,    0,  260,  258,  466,    0,

      262,  259,    0,  262,  259,  260,  262,  259,  260,  263,
      261,  260,  263,  261,  261,  263,  261,  264,  264,  265,
      264,  467,  265,  264,  266,  265,  267,  266,  266,  267,
      266,    0,  267,  263,  469,  523,  263,  471,    0,  263,
        0,  264,  264,  265,  264,  467,  265,  264,  266,  265,
      267,  266,  266,  267,  266,  268,  267,  269,  469,  270,
      523,  471,  268,  476,  269,  268,  270,  269,  268,  270,
      269,  271,  270,  271,  271,  272,  479,  271,  272,  483,
      268,  272,  269,  272,  270,    0,  268,  476,  269,  268,
      270,  269,  268,  270,  269,  271,  270,  271,  271,  272,

      479,  271,  272,  483,  275,  272,  273,  272,  273,  273,
      274,  275,  273,  274,  275,    0,  274,  275,  274,  550,
      278,    0,    0,  278,    0,    0,  278,    0,    0,  275,
      273,  525,  273,  273,  274,  275,  273,  274,  275,  276,
      274,  275,  274,  550,  278,  277,  276,  278,  277,  276,
      278,  277,  276,  277,  280,  279,  525,  280,    0,  280,
      280,    0,  279,  551,  276,  279,  542,    0,  279,  277,
      276,  543,  277,  276,    0,  277,  276,  277,  280,  281,
      279,  280,  281,  280,  280,  281,  279,  551,  281,  279,
      282,  542,  279,    0,  283,  285,  543,  283,  285,  282,

      283,  285,  282,  281,  286,  282,  281,  286,    0,  281,
      286,  286,  281,    0,  287,  282,  287,  287,  283,  285,
      287,  283,  285,  282,  283,  285,  282,    0,  286,  282,
        0,  286,  288,  291,  286,  286,  289,    0,  287,    0,
      287,  287,  291,  288,  287,  291,  288,  289,  291,  288,
      289,    0,    0,  289,    0,  290,    0,  288,  291,    0,
        0,  289,  290,    0,    0,  290,  291,  288,  290,  291,
      288,  289,  291,  288,  289,  292,    0,  289,  293,    0,
      290,  293,  293,    0,  293,  292,  290,  294,  292,  290,
      294,  292,  290,  294,    0,  295,    0,    0,  295,    0,

      292,  295,  293,    0,  297,  293,  293,  297,  293,  292,
      297,  294,  292,    0,  294,  292,    0,  294,    0,  295,
      296,  296,  295,  296,  299,  295,  296,  299,  297,  298,
      299,  297,  298,  298,  297,  298,  300,    0,    0,    0,
        0,    0,    0,  300,  296,  296,  300,  296,  299,  300,
      296,  299,    0,  298,  299,  301,  298,  298,    0,  298,
        0,  300,  301,    0,    0,  301,    0,  300,  301,  302,
      300,    0,  303,  300,  303,  303,  302,    0,  303,  302,
      301,  305,  302,  305,  305,  304,  301,  305,  304,  301,
        0,  304,  301,  304,  302,    0,  303,    0,  303,  303,

      302,    0,  303,  302,    0,  305,  302,  305,  305,  304,
      306,  305,  304,  306,  307,  304,  306,  304,  306,  308,
        0,  307,  309,    0,  307,  309,  308,  307,  309,  308,
      309,    0,  308,    0,  306,  310,    0,  306,  310,  307,
      306,  310,  306,    0,  308,  307,  309,    0,  307,  309,
      308,  307,  309,  308,  309,    0,  308,  311,    0,  310,
        0,    0,  310,  312,  311,  310,  312,  311,  312,  312,
      311,  313,    0,  315,  313,    0,  315,  313,    0,  315,
      313,    0,  311,    0,    0,    0,    0,  312,  311,    0,
      312,  311,  312,  312,  311,  313,  314,  315,  313,    0,

      315,  313,    0,  315,  313,  314,  345,    0,  314,  345,
        0,  314,  345,  345,  350,  346,    0,  350,    0,    0,
      350,  314,  346,    0,    0,  346,    0,    0,  346,  314,
      345,    0,  314,  345,    0,  314,  345,  345,  350,  347,
      346,  350,  347,  348,  350,  347,  346,  347,    0,  346,
        0,    0,  346,  348,  349,  351,  348,  349,  351,  348,
      349,  351,  349,  347,  352,    0,  347,  352,  348,  347,
      352,  347,    0,    0,    0,    0,    0,  348,  349,  351,
      348,  349,  351,  348,  349,  351,  349,  353,  352,  354,
      353,  352,  354,  353,  352,  354,  355,  356,  357,  355,

      356,  357,  355,  356,  357,    0,  358,    0,    0,  358,
      357,  353,  358,  354,  353,    0,  354,  353,    0,  354,
      355,  356,  357,  355,  356,  357,  355,  356,  357,    0,
      358,    0,  359,  358,  357,  360,  358,  359,  360,  361,
      359,  360,  361,  359,  362,  361,  363,  362,    0,  363,
      362,    0,  363,    0,  363,    0,    0,  359,    0,  360,
        0,  359,  360,  361,  359,  360,  361,  359,  362,  361,
      363,  362,    0,  363,  362,    0,  363,  364,  363,    0,
      364,  365,  365,  364,  365,  366,    0,  365,    0,  367,
        0,    0,  367,  369,  366,  367,  369,  366,  367,  369,

      366,  364,  368,    0,  364,  365,  365,  364,  365,  368,
      366,  365,  368,    0,  367,  368,  367,  369,  366,  367,
      369,  366,  367,  369,  366,  370,    0,  368,  370,    0,
        0,  370,    0,  368,  370,  371,  368,  372,    0,  368,
        0,  372,  371,    0,  372,  371,    0,  372,  371,  370,
      374,    0,  370,  374,  373,  370,  374,  374,  370,    0,
      371,  373,  372,    0,  373,  372,  371,  373,  372,  371,
        0,  372,  371,    0,  374,    0,  375,  374,    0,  373,
      374,  374,    0,  375,  376,  373,  375,  376,  373,  375,
      376,  373,  376,  377,    0,    0,  378,    0,    0,  378,

        0,  375,  378,  377,  378,    0,  377,  375,  376,  377,
      375,  376,    0,  375,  376,    0,  376,    0,  377,  379,
      378,    0,  379,  378,    0,  379,  378,  377,  378,  380,
      377,  381,  380,  377,  381,  380,  382,  381,  383,  382,
        0,  383,  382,  379,  383,  384,  379,    0,  384,  379,
        0,  384,    0,  380,    0,  381,  380,    0,  381,  380,
      382,  381,  383,  382,  385,  383,  382,  385,  383,  384,
      385,  386,  384,  387,  386,  384,  387,  386,    0,  387,
        0,  388,    0,  386,  389,    0,  388,  389,  385,  388,
      389,  385,  388,  390,  385,  386,  390,  387,  386,  390,

      387,  386,    0,  387,    0,    0,  388,  386,  389,  391,
      388,  389,  391,  388,  389,  391,  388,  390,  392,  393,
      390,  392,  393,  390,  392,  393,  392,    0,  394,  394,
        0,  394,  395,  391,  394,    0,  391,    0,    0,  391,
        0,  395,  392,  393,  395,  392,  393,  395,  392,  393,
      392,    0,  394,  394,    0,  394,    0,  395,  394,    0,
      396,    0,    0,  396,    0,  395,  396,  397,  395,  396,
      398,  395,  399,  398,  397,  399,  398,  397,  399,    0,
      397,  399,    0,    0,    0,  396,    0,  396,    0,    0,
      396,    0,  397,  396,  398,    0,  399,  398,  397,  399,

      398,  397,  399,  400,  397,  399,    0,  401,  402,    0,
      400,  401,    0,  400,  401,  402,  400,  401,  402,    0,
        0,  402,    0,    0,    0,    0,    0,    0,  400,    0,
        0,    0,  401,  402,  400,  401,  424,  400,  401,  402,
      400,  401,  402,  424,  425,  402,  424,  426,    0,  424,
        0,  427,    0,  425,  426,    0,  425,  426,    0,  425,
      426,  424,  427,    0,    0,  427,    0,  424,  427,  425,
      424,    0,  426,  424,    0,  428,  427,  425,  426,    0,
      425,  426,  428,  425,  426,  428,  427,    0,  428,  427,
        0,  429,  427,  429,  429,  430,    0,  429,    0,    0,

      428,    0,  430,    0,    0,  430,  428,    0,  430,  428,
        0,    0,  428,    0,    0,  429,  431,  429,  429,  431,
      430,  429,  431,    0,  431,  432,  430,    0,  432,  430,
        0,  432,  430,  432,    0,  433,  434,    0,  433,  434,
      431,  433,  434,  431,  434,    0,  431,  436,  431,  432,
      436,  435,  432,  436,    0,  432,  437,  432,  435,  433,
      434,  435,  433,  434,  435,  433,  434,  437,  434,    0,
      437,  436,  438,  437,  436,  438,  435,  436,  438,    0,
      438,  437,  435,  439,    0,  435,  439,    0,  435,  439,
      439,  437,    0,  441,  437,    0,  438,  437,    0,  438,

      441,    0,  438,  441,  438,  440,  441,  439,  440,    0,
      439,  440,  440,  439,  439,    0,  442,  443,  441,  442,
        0,    0,  442,  442,  441,    0,    0,  441,  443,  440,
      441,  443,  440,    0,  443,  440,  440,    0,  444,    0,
      442,  444,  443,  442,  444,    0,  442,  442,    0,    0,
      445,    0,  443,    0,    0,  443,    0,  445,  443,    0,
      445,  446,  444,  445,  447,  444,    0,    0,  444,    0,
      446,  447,    0,  446,  447,  445,  446,  447,  449,  448,
        0,  445,    0,    0,  445,  449,  446,  445,  449,  447,
      448,  449,    0,  448,  446,  447,  448,  446,  447,    0,

      446,  447,    0,  449,  448,  450,    0,  450,  450,  449,
      452,  450,  449,  452,  448,  449,  452,  448,  452,  453,
      448,    0,  453,  451,    0,  453,    0,  453,    0,  450,
      451,  450,  450,  451,  452,  450,  451,  452,  454,    0,
      452,  454,  452,  453,  454,    0,  453,  455,  451,  453,
      455,  453,    0,  455,  451,  455,  456,  451,  457,  458,
      451,  457,  454,  456,  457,  454,  456,    0,  454,  456,
      458,  455,  459,  458,  455,  459,  458,  455,  459,  455,
      459,  456,  457,    0,  458,  457,    0,  456,  457,    0,
      456,    0,    0,  456,  458,    0,  459,  458,    0,  459,

      458,    0,  459,  460,  459,  461,  460,    0,  461,  460,
      460,  461,  461,  462,    0,  463,    0,    0,  463,    0,
      462,  463,  463,  462,    0,  465,  462,  460,  465,  461,
      460,  465,  461,  460,  460,  461,  461,  464,  462,  463,
        0,    0,  463,    0,  462,  463,  463,  462,  464,  465,
      462,  464,  465,  484,  464,  465,  484,    0,  485,  484,
      484,  485,  464,    0,  485,  486,  485,  487,  486,    0,
      487,  486,  464,  487,  487,  464,    0,  484,  464,    0,
      484,    0,  485,  484,  484,  485,    0,    0,  485,  486,
      485,  487,  486,  488,  487,  486,  488,  487,  487,  488,

      489,  490,  489,  489,  490,  491,  489,  490,  491,  492,
      493,  491,  492,  493,    0,  492,  493,  488,    0,    0,
      488,    0,    0,  488,  489,  490,  489,  489,  490,  491,
      489,  490,  491,  492,  493,  491,  492,  493,  494,  492,
      493,  494,  495,  496,  494,  495,  496,  497,  495,  496,
      497,  498,    0,  497,  498,  497,    0,  498,  499,    0,
        0,  499,  494,    0,  499,  494,  495,  496,  494,  495,
      496,  497,  495,  496,  497,  498,    0,  497,  498,  497,
      500,  498,  499,  500,  501,  499,  500,  501,  499,  502,
      501,  503,  502,    0,  503,  502,  502,  503,    0,  503,

      504,    0,    0,  504,  500,    0,  504,  500,  501,    0,
      500,  501,    0,  502,  501,  503,  502,    0,  503,  502,
      502,  503,  505,  503,  504,  505,    0,  504,  505,  505,
      504,  506,    0,  507,  506,  507,  507,  506,  508,  507,
        0,  508,  509,    0,  508,  509,  505,    0,  509,  505,
        0,    0,  505,  505,    0,  506,    0,  507,  506,  507,
      507,  506,  508,  507,  510,  508,  509,  510,  508,  509,
      510,  511,  509,  512,  511,  513,  512,  511,  513,  512,
      514,  513,    0,  514,  515,    0,  514,  515,  510,    0,
      515,  510,  515,    0,  510,  511,    0,  512,  511,  513,

      512,  511,  513,  512,  514,  513,  516,  514,  515,  516,
      514,  515,  516,    0,  515,  517,  515,  518,  517,  519,
      518,  517,  519,  518,    0,  519,  527,    0,  528,  527,
      516,  528,  527,  516,  528,    0,  516,    0,    0,  517,
        0,  518,  517,  519,  518,  517,  519,  518,    0,  519,
      527,    0,  528,  527,  529,  528,  527,    0,  528,  530,
        0,  529,  531,    0,  529,  531,  530,  529,  531,  530,
      533,    0,  530,  533,  532,    0,  533,  532,    0,  529,
      532,    0,    0,  532,  530,  529,  531,    0,  529,  531,
      530,  529,  531,  530,  533,    0,  530,  533,    0,  532,

      533,  532,  534,  535,  532,  534,  535,  532,  534,  535,
      536,  537,    0,  538,    0,    0,  538,  536,  537,  538,
      536,  537,    0,  536,  537,  539,  534,  535,  539,  534,
      535,  539,  534,  535,  539,  536,  537,  538,    0,    0,
      538,  536,  537,  538,  536,  537,    0,  536,  537,    0,
      539,  540,  539,  544,  540,  539,  544,  540,  539,  544,
        0,  545,    0,    0,    0,  547,    0,    0,  547,    0,
      545,  547,    0,  545,    0,  540,  545,  544,  540,    0,
      544,  540,    0,  544,  546,    0,  545,    0,    0,  547,
        0,    0,  547,  546,  545,  547,  546,  545,    0,  546,

      545,  548,    0,  549,    0,  558,    0,    0,  558,  546,
      548,  558,  549,  548,    0,  549,  548,  546,  549,  552,
      546,    0,  552,  546,    0,  552,  548,  552,  549,  558,
        0,    0,  558,    0,  548,  558,  549,  548,  553,  549,
      548,  553,  549,  552,  553,  553,  552,  554,    0,  552,
      554,  552,    0,  554,  555,  554,    0,  555,    0,    0,
      555,  555,  553,    0,  559,  553,    0,  559,  553,  553,
      559,  554,    0,    0,  554,    0,    0,  554,  555,  554,
      560,  555,    0,  560,  555,  555,  560,  561,  559,    0,
      561,  559,    0,  561,  559,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  560,    0,    0,  560,    0,    0,
      560,  561,    0,    0,  561,    0,    0,  561,  564,    0,
      564,  564,  565,    0,  565,  565,  566,  566,    0,  566,
      567,  567,    0,  567,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
#line 3 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
    
#include <hubDB/DBParserDefs.h>
#include <hubDB/DBParser.h>



#line 1413 "/home/martin/Downloads/HubDB/DBLib/DBLexer.cpp"

#define INITIAL 0
#define STATE_COMMENT 1
#define STATE_VALUE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * _out_str ,yyscan_t yyscanner );

			int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int _line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	{
#line 73 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"


#line 1679 "/home/martin/Downloads/HubDB/DBLib/DBLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 563 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3535 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 75 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{BEGIN 0; return APOSTROPHE;}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 76 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{myyylval->str=strdup(yytext); return STR_VALUE;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 77 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 78 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{BEGIN 0;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 79 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return LIST;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 80 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return ON;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 81 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return JOIN;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return INDEX;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 83 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return GET;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return AND;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return SCHEMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return UNIQUE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return FOR;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return TYPE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return CREATE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DROP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 91 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DATABASE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 92 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DATABASE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 93 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return STATISTICS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 94 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return STATISTICS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 95 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return CLASSES;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 96 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return PRINT;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return HELP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return TABLES;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return TABLE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return INSERT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return INTO;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return VALUES;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return SELECT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DELETE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return FROM;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return WHERE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return TO;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return IMPORT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return EXPORT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return QUIT;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return CONNECT;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DISCONNECT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return AS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return INTT;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DOUBLET;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return VARCHAR;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return IN;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{BEGIN STATE_VALUE; return APOSTROPHE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{myyylval->realnum=atof(yytext);return REALNUM;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{myyylval->num=atoi(yytext);return NUM;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 121 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{myyylval->str=strdup(yytext);return DBNAME;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 122 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return EQUALS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 123 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return STAR;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 124 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return PARA_OPEN;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 125 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return PARA_CLOSE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 126 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return COMMATA;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 127 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return SEMICOLON;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 128 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{return DOT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 129 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{BEGIN STATE_COMMENT;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 130 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{BEGIN 0;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 131 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 132 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 133 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
{extyyerror(yytext,*yyget_extra(yyscanner));}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 134 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"
ECHO;
	YY_BREAK
#line 2039 "/home/martin/Downloads/HubDB/DBLib/DBLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STATE_COMMENT):
case YY_STATE_EOF(STATE_VALUE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 563 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 563 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 562);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 134 "/home/martin/Downloads/HubDB/DBLib/DBLexer.lex"



